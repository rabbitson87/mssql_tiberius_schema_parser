use serde::{Deserialize, Serialize};
use tiberius::time::chrono::{DateTime, Utc};
use chrono::serde::ts_seconds_option;

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTCustomerStat {
    pub IDN: i32,
    pub CustomerStatIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    pub SalesTotal: Option<f64>,
    pub Balance: Option<f64>,
    pub DiscountTotal: Option<f64>,
    pub DiscountRatio: Option<f32>,
    pub Rank: Option<i32>,
    pub VisitCount: Option<i32>,
    #[serde(with = "ts_seconds_option")]
    pub LastVisitDate: Option<DateTime<Utc>>,
    pub LastInvoiceIDN: Option<f64>,
    pub BonusUsed: Option<f64>,
    pub InactiveDays: Option<i32>,
    pub SalesPerVisit: Option<f64>,
    pub BonusAdded: Option<f64>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQtActiveUpcharge {
    pub IDN: i32,
    pub UpchargeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub ReferenceIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub CustomerIDN: Option<f64>,
    pub SyncStatus: Option<u8>,
    pub SplitIndex: Option<i16>,
    pub Qty: Option<i16>,
    pub QtyAdded: Option<i16>,
    pub IsRecipeCalculated: Option<bool>,
    pub ItemIndex: Option<i16>,
    pub IsCanceled: Option<bool>,
    pub QtyActual: Option<i16>,
    pub Price: Option<f64>,
    pub InvoiceIDN: Option<f64>,
    pub IsVoid: Option<bool>,
    pub Memo: Option<String>,
    pub Prefix: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTDiscount {
    pub IDN: i32,
    pub DiscountIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub InvoiceIDN: Option<f64>,
    pub ReferenceIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub UnitIDC: Option<String>,
    pub Total: Option<f64>,
    pub SyncStatus: Option<u8>,
    pub ItemIDN: Option<f64>,
    pub IsItemDiscount: Option<bool>,
    pub Reason: Option<String>,
    pub IsVoid: Option<bool>,
    pub ShiftIDN: Option<f64>,
    pub DiscountIDNOriginal: Option<f64>,
    pub AmountOriginal: Option<f64>,
    pub SerialNumber: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSSystemValue {
    pub IDN: i32,
    pub SystemValueIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub Value: Option<String>,
    pub Value2: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTEmployee {
    pub IDN: i32,
    pub EmployeeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub LastName: Option<String>,
    pub FirstName: Option<String>,
    pub Password: Option<String>,
    pub WorkHours: Option<String>,
    pub ItemOrder: Option<i32>,
    pub Restricted: Option<String>,
    pub PositionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ClockInTime: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub ClockOutTime: Option<DateTime<Utc>>,
    pub FName: Option<String>,
    pub FWorkHour: Option<String>,
    pub StaticOrder: Option<i32>,
    pub DefaultCommissionRate: Option<i32>,
    pub DefaultCommissionUnit: Option<String>,
    pub Restriction: Option<String>,
    pub HourlyRate: Option<f64>,
    pub SalaryRate: Option<f64>,
    pub PayTypeIDC: Option<String>,
    pub PayFreqIDC: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub PayStartDate: Option<DateTime<Utc>>,
    pub IsEveryone: Option<bool>,
    pub FingerPrintID: Option<Vec<u8>>,
    pub SyncStatus: Option<u8>,
    pub SSNum: Option<String>,
    pub CellPhone: Option<String>,
    pub HomePhone: Option<String>,
    pub Address: Option<String>,
    pub City: Option<String>,
    pub State: Option<String>,
    pub Zipcode: Option<String>,
    pub Memo: Option<String>,
    pub IsOwner: Option<bool>,
    pub IsAnyone: Option<bool>,
    pub PaidOn: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub LastPaidDate: Option<DateTime<Utc>>,
    pub FDetail: Option<String>,
    pub FPayroll: Option<String>,
    pub FPosition: Option<String>,
    pub DeliveryIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub DeliveryStartTime: Option<DateTime<Utc>>,
    pub EMail: Option<String>,
    pub IsDelivering: Option<bool>,
    pub UserName: Option<String>,
    pub IsEnforceStrictTimeClock: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub BreakStartTime: Option<DateTime<Utc>>,
    pub ChangeCarrying: Option<f64>,
    pub IsEnforceClockIn: Option<bool>,
    pub MSR: Option<String>,
    pub UseForeignItemName: Option<bool>,
    pub PaidBreaks: Option<bool>,
    pub RestrictedDiscounts: Option<String>,
    pub SecurityGroupIDN: Option<f64>,
    pub UseOvertime: Option<bool>,
    pub FName1: Option<String>,
    pub AllowMultiPosition: Option<bool>,
    pub FingerPrintData: Option<Vec<u8>>,
    pub MultiPositionSetting: Option<String>,
    pub Message: Option<String>,
    pub IsAskCashTipsOnClockOut: Option<bool>,
    pub IsAutoDrawerInWhenClockIn: Option<bool>,
    pub IsCheckOpenOrdersWhenDrawerOut: Option<bool>,
    pub IsEnforceDrawerIn: Option<bool>,
    pub IsOpenDrawerOnPayment: Option<bool>,
    pub IsUseServerBanking: Option<bool>,
    pub PaidBreakFirstHour: Option<bool>,
    pub RestrictedReports: Option<String>,
    pub IsRequireManagerTimeClockApproval: Option<bool>,
    pub IsPendingMessage: Option<bool>,
    pub IsUseCustomBreaks: Option<bool>,
    pub BreakIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub BreakEndTime: Option<DateTime<Utc>>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSIdentity {
    pub IDN: i32,
    pub IdentityIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub TableName: Option<String>,
    pub CurIDN: Option<i32>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQtActivePayment {
    pub IDN: i32,
    pub PaymentIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    pub InvoiceIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub TypeIDN: Option<f64>,
    pub GiftcardIDN: Option<f64>,
    pub CCNum: Option<String>,
    pub CCExp: Option<String>,
    pub CCName: Option<String>,
    pub CCTrack: Option<String>,
    pub CCAuth: Option<String>,
    pub CHIDTypeIDN: Option<f64>,
    pub CHIDNum: Option<String>,
    pub CHNum: Option<String>,
    pub IsVoid: Option<bool>,
    pub VoidReason: Option<String>,
    pub Summary: Option<String>,
    pub Change: Option<f64>,
    pub CCTypeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub Tendered: Option<f64>,
    pub Credit: Option<f64>,
    pub GiftcardBalance: Option<f64>,
    pub TipAmount: Option<f64>,
    pub IsEncrypted: Option<bool>,
    pub SyncStatus: Option<u8>,
    pub TipSettled: Option<bool>,
    pub CCAuthVoid: Option<String>,
    pub CCAVS: Option<String>,
    pub CCCVV2: Option<String>,
    pub CCTroutD: Option<String>,
    pub CCError: Option<String>,
    pub CCResult: Option<String>,
    pub CCRespCode: Option<String>,
    pub CCTransNum: Option<String>,
    pub CCRefNumber: Option<String>,
    pub InvoiceNumber: Option<i32>,
    pub FCCNum: Option<String>,
    pub CCTroutDVoid: Option<String>,
    pub TipTypeIDN: Option<f64>,
    pub IsVoidAdjustment: Option<bool>,
    pub TipSettleAmount: Option<f64>,
    pub IsTipSettleAmountEntered: Option<bool>,
    pub IsUseTerminal: Option<bool>,
    pub TipAmountCash: Option<f64>,
    pub TipSettleAmountCash: Option<f64>,
    pub TipSettledCash: Option<bool>,
    pub IsTipSettleAmountEnteredCash: Option<bool>,
    pub IsTipSettleDone: Option<bool>,
    pub PaymentTypeIDC: Option<String>,
    pub TipAmountAutoGratuity: Option<f64>,
    pub TipOther: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDateInvoice: Option<DateTime<Utc>>,
    pub ShiftIDN: Option<f64>,
    pub IsAccountPayment: Option<bool>,
    pub RunningBalance: Option<f64>,
    pub ServerIDN: Option<f64>,
    pub CCRecordNum: Option<String>,
    pub CCIsBatchClosed: Option<bool>,
    pub CCBalance: Option<f64>,
    pub CCAcqRefData: Option<String>,
    pub TipAmountManual: Option<f64>,
    pub CCAID: Option<String>,
    pub CCAppLabel: Option<String>,
    pub CCARC: Option<String>,
    pub CCATC: Option<String>,
    pub CCCardType: Option<String>,
    pub CCCVM: Option<String>,
    pub CCEntryMethod: Option<String>,
    pub CCIAD: Option<String>,
    pub CCResultPrinter: Option<String>,
    pub CCTC: Option<String>,
    pub CCTSI: Option<String>,
    pub CCTVR: Option<String>,
    pub CCRefNum: Option<String>,
    pub CCIsPartialAuth: Option<bool>,
    pub CCDetail: Option<String>,
    pub CCIsSignatureCaptured: Option<bool>,
    pub SeqNumber: Option<u8>,
    pub CCIsOfflineMode: Option<bool>,
    pub BillToCustomerIDN: Option<f64>,
    pub CCSurcharge: Option<f64>,
    pub TipAmountPinpad: Option<f64>,
    pub CashDiscount: Option<f64>,
    pub TaxCCSurcharge: Option<f64>,
    pub IsDebit: Option<bool>,
    pub TipItem: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTGiftcard {
    pub IDN: i32,
    pub GiftcardIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Amount: Option<f64>,
    pub Balance: Option<f64>,
    pub GiftcardID: Option<String>,
    pub CustomerIDN: Option<f64>,
    pub Memo: Option<String>,
    pub SyncStatus: Option<u8>,
    pub Discount: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub Expiration: Option<DateTime<Utc>>,
    pub InvoiceIDN: Option<f64>,
    pub TypeIDC: Option<String>,
    pub StartNum: Option<f64>,
    pub EndNum: Option<f64>,
    pub IsVoucher: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRList {
    pub IDN: i32,
    pub ListIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub ListCategoryIDN: Option<f64>,
    pub IsSystem: Option<bool>,
    pub TypeIDC: Option<String>,
    pub VendorCode: Option<String>,
    pub Address: Option<String>,
    pub Address2: Option<String>,
    pub City: Option<String>,
    pub State: Option<String>,
    pub Zipcode: Option<String>,
    pub Country: Option<String>,
    pub ContactName: Option<String>,
    pub Phone: Option<String>,
    pub EMail: Option<String>,
    pub Fax: Option<String>,
    pub Note: Option<String>,
    pub Data: Option<String>,
    pub SpecialPriceIDN: Option<f64>,
    pub IsTaxExempt: Option<bool>,
    pub AutoGratuityRate: Option<f32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTInvoiceEdit {
    pub IDN: i32,
    pub InvoiceEditIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub InvoiceIDN: Option<f64>,
    pub AmountBefore: Option<f64>,
    pub AmountAfter: Option<f64>,
    pub AmountDifference: Option<f64>,
    pub PctDifference: Option<f32>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRInventoryDetail {
    pub IDN: i32,
    pub InventoryDetailIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Price: Option<f64>,
    pub Qty: Option<i16>,
    pub QtyOrdered: Option<i16>,
    pub QtyAccumulated: Option<i16>,
    #[serde(with = "ts_seconds_option")]
    pub LastOrderDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub LastCheckedDate: Option<DateTime<Utc>>,
    pub InventoryItemIDN: Option<f64>,
    pub QtyProjected: Option<i16>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTItem {
    pub IDN: i32,
    pub ItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub ReferenceIDN: Option<f64>,
    pub InvoiceIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub Balance: Option<f64>,
    pub Summary: Option<String>,
    pub EmployeeIDN: Option<f64>,
    pub AdjustedPrice: Option<f64>,
    pub CardIDN: Option<f64>,
    pub IsVoid: Option<bool>,
    pub PackageGroupIDN: Option<f64>,
    pub PackageIDN: Option<f64>,
    pub Memo: Option<String>,
    pub SyncStatus: Option<u8>,
    pub Qty: Option<i16>,
    pub IsPrinted: Option<bool>,
    pub SplitCount: Option<i16>,
    pub QtyAdded: Option<i16>,
    pub Discount: Option<f64>,
    pub DiscountReason: Option<String>,
    pub IsRecipeCalculated: Option<bool>,
    pub ItemDiscount: Option<f64>,
    pub SubtotalOriginal: Option<f64>,
    pub Tax1: Option<f64>,
    pub Tax2: Option<f64>,
    pub Tax3: Option<f64>,
    pub Tax: Option<f64>,
    pub IsCanceled: Option<bool>,
    pub IsDeleted: Option<bool>,
    pub QtyActual: Option<i16>,
    pub Price: Option<f64>,
    pub GiftcardID: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub AdjustedTime: Option<DateTime<Utc>>,
    pub IsSplitted: Option<bool>,
    pub TotalTaxable: Option<f64>,
    pub TotalNonTaxable: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDateInvoice: Option<DateTime<Utc>>,
    pub MemoPrefix: Option<String>,
    pub MemoPostfix: Option<String>,
    pub MemoSpecialPrice: Option<String>,
    pub Total: Option<f64>,
    pub ShiftIDN: Option<f64>,
    pub GiftcardAmount: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub GiftcardExpiration: Option<DateTime<Utc>>,
    pub TipAmount: Option<f64>,
    pub GuestIndex: Option<u8>,
    pub IsRefund: Option<bool>,
    pub IsHoldKitchen: Option<bool>,
    pub IsOnlineOrder: Option<bool>,
    pub IsItemSplitted: Option<bool>,
    pub CRV: Option<f64>,
    pub IsAddedAfterSplit: Option<bool>,
    pub IsTimerStopped: Option<bool>,
    pub IsHalf: Option<bool>,
    pub ItemOrder: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub KitchenSendTime: Option<DateTime<Utc>>,
    pub IsInventoryUpdated: Option<bool>,
    pub HoldTime: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub SendOn: Option<DateTime<Utc>>,
    pub KDStatus: Option<String>,
    pub IsKDDone: Option<bool>,
    pub HoldStationID: Option<u8>,
    pub IsTaxExempt: Option<bool>,
    pub CourseNum: Option<u8>,
    pub OpenPrice: Option<f64>,
    pub DispenseCount: Option<u8>,
    pub IsFired: Option<bool>,
    pub KDBumpStatus: Option<i16>,
    pub TipItem: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSInputLog {
    pub IDN: i32,
    pub InputLogIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub FormName: Option<String>,
    pub ControlName: Option<String>,
    pub ControlIndex: Option<i16>,
    pub Caption: Option<String>,
    pub InvoiceIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTOffday {
    pub IDN: i32,
    pub OffdayIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub EmployeeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub Date1: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub Date2: Option<DateTime<Utc>>,
    pub Reason: Option<String>,
    pub IsAllDay: Option<bool>,
    pub IsApplyToAll: Option<bool>,
    pub Recurrence: Option<String>,
    pub SyncStatus: Option<u8>,
    pub SpecialPriceIDN: Option<f64>,
    pub HolidayIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTReservation {
    pub IDN: i32,
    pub ReservationIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub ReservationDate: Option<DateTime<Utc>>,
    pub Name: Option<String>,
    pub Memo: Option<String>,
    pub GuestNumber: Option<i16>,
    pub Phone: Option<String>,
    pub Status: Option<i16>,
    pub FStatus: Option<String>,
    pub FTime: Option<String>,
    pub IsWalkIn: Option<bool>,
    pub GuestOrder: Option<i16>,
    pub TableNum: Option<String>,
    pub IsReminderTextSent: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTPackage {
    pub IDN: i32,
    pub PackageIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub PackageGroupIDN: Option<f64>,
    pub CustomerIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub PackageCount: Option<i32>,
    pub IsDone: Option<bool>,
    pub IsVoid: Option<bool>,
    pub UsedCount: Option<i32>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTPayment {
    pub IDN: i32,
    pub PaymentIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    pub InvoiceIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub TypeIDN: Option<f64>,
    pub GiftcardIDN: Option<f64>,
    pub CCNum: Option<String>,
    pub CCExp: Option<String>,
    pub CCName: Option<String>,
    pub CCTrack: Option<String>,
    pub CCAuth: Option<String>,
    pub CHIDTypeIDN: Option<f64>,
    pub CHIDNum: Option<String>,
    pub CHNum: Option<String>,
    pub IsVoid: Option<bool>,
    pub VoidReason: Option<String>,
    pub Summary: Option<String>,
    pub Change: Option<f64>,
    pub CCTypeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub Tendered: Option<f64>,
    pub Credit: Option<f64>,
    pub GiftcardBalance: Option<f64>,
    pub TipAmount: Option<f64>,
    pub IsEncrypted: Option<bool>,
    pub SyncStatus: Option<u8>,
    pub TipSettled: Option<bool>,
    pub CCAuthVoid: Option<String>,
    pub CCAVS: Option<String>,
    pub CCCVV2: Option<String>,
    pub CCTroutD: Option<String>,
    pub CCError: Option<String>,
    pub CCResult: Option<String>,
    pub CCRespCode: Option<String>,
    pub CCTransNum: Option<String>,
    pub CCRefNumber: Option<String>,
    pub InvoiceNumber: Option<i32>,
    pub FCCNum: Option<String>,
    pub CCTroutDVoid: Option<String>,
    pub TipTypeIDN: Option<f64>,
    pub IsVoidAdjustment: Option<bool>,
    pub TipSettleAmount: Option<f64>,
    pub IsTipSettleAmountEntered: Option<bool>,
    pub IsUseTerminal: Option<bool>,
    pub TipAmountCash: Option<f64>,
    pub TipSettleAmountCash: Option<f64>,
    pub TipSettledCash: Option<bool>,
    pub IsTipSettleAmountEnteredCash: Option<bool>,
    pub IsTipSettleDone: Option<bool>,
    pub PaymentTypeIDC: Option<String>,
    pub TipAmountAutoGratuity: Option<f64>,
    pub TipOther: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDateInvoice: Option<DateTime<Utc>>,
    pub ShiftIDN: Option<f64>,
    pub IsAccountPayment: Option<bool>,
    pub RunningBalance: Option<f64>,
    pub ServerIDN: Option<f64>,
    pub CCRecordNum: Option<String>,
    pub CCIsBatchClosed: Option<bool>,
    pub CCBalance: Option<f64>,
    pub CCAcqRefData: Option<String>,
    pub TipAmountManual: Option<f64>,
    pub CCAID: Option<String>,
    pub CCAppLabel: Option<String>,
    pub CCARC: Option<String>,
    pub CCATC: Option<String>,
    pub CCCardType: Option<String>,
    pub CCCVM: Option<String>,
    pub CCEntryMethod: Option<String>,
    pub CCIAD: Option<String>,
    pub CCResultPrinter: Option<String>,
    pub CCTC: Option<String>,
    pub CCTSI: Option<String>,
    pub CCTVR: Option<String>,
    pub CCRefNum: Option<String>,
    pub CCIsPartialAuth: Option<bool>,
    pub CCDetail: Option<String>,
    pub CCIsSignatureCaptured: Option<bool>,
    pub SeqNumber: Option<u8>,
    pub CCIsOfflineMode: Option<bool>,
    pub BillToCustomerIDN: Option<f64>,
    pub CCSurcharge: Option<f64>,
    pub TipAmountPinpad: Option<f64>,
    pub CashDiscount: Option<f64>,
    pub TaxCCSurcharge: Option<f64>,
    pub IsDebit: Option<bool>,
    pub TipItem: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRTableLink {
    pub IDN: i32,
    pub TableLinkIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub LinkID: Option<f64>,
    pub TableIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTDelivery {
    pub IDN: i32,
    pub DeliveryIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub AmountReturned: Option<f64>,
    pub AmountTotal: Option<f64>,
    pub Balance: Option<f64>,
    pub ChangeGiven: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ClosedDate: Option<DateTime<Utc>>,
    pub EmployeeIDN: Option<f64>,
    pub AmountCollected: Option<f64>,
    pub Tips: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRSpecialPriceItem {
    pub IDN: i32,
    pub SpecialPriceItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub IsEnabled: Option<bool>,
    pub Price: Option<f64>,
    pub SpecialPriceIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub IsPriceChanged: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboDtproperties {
    pub Id: i32,
    pub Objectid: Option<i32>,
    pub Property: String,
    pub Value: Option<String>,
    pub Uvalue: Option<String>,
    pub Lvalue: Option<Vec<u8>>,
    pub Version: i32,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTTimeClock {
    pub IDN: i32,
    pub TimeClockIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub EmployeeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub TimeIn: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub TimeOut: Option<DateTime<Utc>>,
    pub TotalSeconds: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub IsBreak: Option<bool>,
    pub Status: Option<i16>,
    pub Wage: Option<f64>,
    pub HourlyRate: Option<f64>,
    pub WageRegular: Option<f64>,
    pub WageOvertime: Option<f64>,
    pub OvertimeRate: Option<f64>,
    pub OvertimeRatePercentage: Option<f32>,
    pub SecurityGroupIDN: Option<f64>,
    pub IsPaidBreak: Option<bool>,
    pub TotalSecondsRegular: Option<i32>,
    pub TotalSecondsOvertime: Option<i32>,
    pub CashTips: Option<f64>,
    pub IsPaidBreakFirstHour: Option<bool>,
    pub TotalSecondsBreak: Option<i32>,
    pub WagePaidBreak: Option<f64>,
    pub BreakIDN: Option<f64>,
    pub PaidInFirstMinutes: Option<i16>,
    pub BreakName: Option<String>,
    pub TipsCash: Option<f64>,
    pub TipsCC: Option<f64>,
    pub IsManualEntry: Option<bool>,
    pub IsModified: Option<bool>,
    pub TotalSecondsDoubleTime: Option<i32>,
    pub TotalSecondsPaid: Option<i32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTUpcharge {
    pub IDN: i32,
    pub UpchargeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub ReferenceIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub CustomerIDN: Option<f64>,
    pub SyncStatus: Option<u8>,
    pub SplitIndex: Option<i16>,
    pub Qty: Option<i16>,
    pub QtyAdded: Option<i16>,
    pub IsRecipeCalculated: Option<bool>,
    pub ItemIndex: Option<i16>,
    pub IsCanceled: Option<bool>,
    pub QtyActual: Option<i16>,
    pub Price: Option<f64>,
    pub InvoiceIDN: Option<f64>,
    pub IsVoid: Option<bool>,
    pub Memo: Option<String>,
    pub Prefix: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTPurchaseOrder {
    pub IDN: i32,
    pub PurchaseOrderIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Balance: Option<f64>,
    pub BillTo: Option<String>,
    pub Credit: Option<f64>,
    pub Discount: Option<f64>,
    pub FPaymentTerm: Option<String>,
    pub FShippingType: Option<String>,
    pub FShipVia: Option<String>,
    pub FStatus: Option<String>,
    pub FStore: Option<String>,
    pub IsDone: Option<bool>,
    pub IsOrderSent: Option<bool>,
    pub IsReceived: Option<bool>,
    pub IsShipped: Option<bool>,
    pub IsVoid: Option<bool>,
    pub Note: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub OrderDate: Option<DateTime<Utc>>,
    pub Payment: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PaymentDate: Option<DateTime<Utc>>,
    pub PaymentTermIDN: Option<f64>,
    pub PONumer: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub ReceiveDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub ShipDate: Option<DateTime<Utc>>,
    pub Shipping: Option<f64>,
    pub ShippingTypeIDN: Option<f64>,
    pub ShipTo: Option<String>,
    pub ShipViaIDN: Option<f64>,
    pub StatusIDN: Option<f64>,
    pub StoreIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub Tax: Option<f64>,
    pub Total: Option<f64>,
    pub TrackingNum: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub VoidReasonIDN: Option<f64>,
    pub VoidUserIDN: Option<f64>,
    pub PONumber: Option<String>,
    pub InventoryGroupIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRCommission {
    pub IDN: i32,
    pub CommissionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub EmployeeIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub Rate: Option<f64>,
    pub Unit: Option<String>,
    pub SyncStatus: Option<u8>,
    pub IsAllow: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQtActiveDiscount {
    pub IDN: i32,
    pub DiscountIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub InvoiceIDN: Option<f64>,
    pub ReferenceIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub UnitIDC: Option<String>,
    pub Total: Option<f64>,
    pub SyncStatus: Option<u8>,
    pub ItemIDN: Option<f64>,
    pub IsItemDiscount: Option<bool>,
    pub Reason: Option<String>,
    pub IsVoid: Option<bool>,
    pub ShiftIDN: Option<f64>,
    pub DiscountIDNOriginal: Option<f64>,
    pub AmountOriginal: Option<f64>,
    pub SerialNumber: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRDiscount {
    pub IDN: i32,
    pub DiscountIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Name: Option<String>,
    pub Amount: Option<f32>,
    pub UnitIDC: Option<String>,
    pub AppliedCategory: Option<String>,
    pub AppliedDay: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub ExpirationBegin: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub ExpirationEnd: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub Duration: Option<DateTime<Utc>>,
    pub MinAmount: Option<f64>,
    pub ItemOrder: Option<i32>,
    pub Options: Option<String>,
    pub Restriction: Option<String>,
    pub FSummary: Option<String>,
    pub IsAutomatic: Option<bool>,
    pub ApplyOnNewCustomer: Option<bool>,
    pub IsItemRestriction: Option<bool>,
    pub AppliedItems: Option<String>,
    pub PrintAutomatically: Option<bool>,
    pub ImagePath: Option<String>,
    pub SyncStatus: Option<u8>,
    pub AppliedCategoryNames: Option<String>,
    pub DiscountGroupIDN: Option<f64>,
    pub Barcode: Option<String>,
    pub TemplateName: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub TimeStart: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub TimeEnd: Option<DateTime<Utc>>,
    pub TipRate: Option<f32>,
    pub ForceGratuity: Option<bool>,
    pub AppliedNthVisitCount: Option<i16>,
    pub IsAppliedNthVisit: Option<bool>,
    pub InvoiceMemo: Option<String>,
    pub IsBirthdayDiscount: Option<bool>,
    pub AppliedCategories: Option<String>,
    pub MinimumDiscountPoint: Option<i16>,
    pub MinimumDiscountPointDays: Option<i16>,
    pub PreventMultipleDiscount: Option<bool>,
    pub IsPreventDiscountPointAccumulation: Option<bool>,
    pub IsPrintOnReceipt: Option<bool>,
    pub IsRequireSerialNumberScan: Option<bool>,
    pub IsMemberOnly: Option<bool>,
    pub ApplyAmountDiscountToEachItem: Option<bool>,
    pub AppliedOrderType: Option<String>,
    pub ValidSerialNumbers: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRDiscountItem {
    pub IDN: i32,
    pub DiscountItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub DiscountIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRPackageItem {
    pub IDN: i32,
    pub PackageItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub ItemIDN: Option<f64>,
    pub ParentItemIDN: Option<f64>,
    pub SyncStatus: Option<u8>,
    pub ItemOrder: Option<i16>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRTableDeco {
    pub IDN: i32,
    pub TableDecoIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Top: Option<i16>,
    pub Left: Option<i16>,
    pub Width: Option<i16>,
    pub Height: Option<i16>,
    pub PicturePath: Option<String>,
    pub TableSectionIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRReference {
    pub IDN: i32,
    pub ReferenceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub TypeIDC: Option<String>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub Content: Option<String>,
    pub Code: Option<String>,
    pub IconName: Option<String>,
    pub ItemOrder: Option<i32>,
    pub Options: Option<String>,
    pub SyncStatus: Option<u8>,
    pub IsAttachGroupNameInFront: Option<bool>,
    pub IsKitchenOnly: Option<bool>,
    pub IsSystem: Option<bool>,
    pub ButtonColor: Option<i32>,
    pub IDNList: Option<String>,
    pub IsAskQty: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSKitchenDisplay {
    pub IDN: i32,
    pub KitchenDisplayIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub KitchenIndex: Option<i16>,
    pub OrderNum: Option<String>,
    pub OrderType: Option<String>,
    pub Summary: Option<String>,
    pub IsModified: Option<bool>,
    pub IsBumped: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub BumpTime: Option<DateTime<Utc>>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRStore {
    pub IDN: i32,
    pub StoreIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub OwnerName: Option<String>,
    pub Address: Option<String>,
    pub City: Option<String>,
    pub Name: Option<String>,
    pub Zipcode: Option<String>,
    pub Country: Option<String>,
    pub Memo: Option<String>,
    pub Phone: Option<String>,
    pub Fax: Option<String>,
    pub EMail: Option<String>,
    pub Website: Option<String>,
    pub IPAddress: Option<String>,
    pub ItemOrder: Option<i16>,
    pub State: Option<String>,
    pub SyncStatus: Option<u8>,
    pub OwnerPhone: Option<String>,
    pub BillTo: Option<String>,
    pub ShipTo: Option<String>,
    pub CSyncNow: Option<bool>,
    pub CSyncMenu: Option<bool>,
    pub CSyncDiscount: Option<bool>,
    pub CSyncInventoryItem: Option<bool>,
    pub AssignedDiscounts: Option<String>,
    pub AssignedMenus: Option<String>,
    pub GiftCardSalesRewardRate: Option<f32>,
    pub MarketingFeeRate: Option<f32>,
    pub RoyaltyCutoffWeekNum: Option<i16>,
    pub RoyaltyRate: Option<f32>,
    pub CSyncStore: Option<bool>,
    pub BranchName: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub LastSyncDate: Option<DateTime<Utc>>,
    pub Version: Option<String>,
    pub Code: Option<String>,
    pub Instagram: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTExpense {
    pub IDN: i32,
    pub ExpenseIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Amount: Option<f64>,
    pub Reason: Option<String>,
    pub TypeIDN: Option<f64>,
    pub ShiftIDN: Option<f64>,
    pub VendorIDN: Option<f64>,
    pub FVendor: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRTable {
    pub IDN: i32,
    pub TableIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Number: Option<i16>,
    pub IsEnabled: Option<bool>,
    pub TableSectionIDN: Option<f64>,
    pub ServerIDN: Option<f64>,
    pub MaxSeat: Option<i16>,
    pub InvoiceIDN: Option<f64>,
    pub GuestNumber: Option<i16>,
    #[serde(with = "ts_seconds_option")]
    pub SeatedTime: Option<DateTime<Utc>>,
    pub TableNum: Option<String>,
    pub SyncStatus: Option<u8>,
    pub Charge: Option<f64>,
    pub ChargeUnit: Option<String>,
    pub ItemOrder: Option<i16>,
    pub Top: Option<i16>,
    pub Left: Option<i16>,
    pub Width: Option<i16>,
    pub Height: Option<i16>,
    pub ServerTipRatio: Option<i16>,
    pub TableGroupNum: Option<i16>,
    pub IsBarTab: Option<bool>,
    pub LinkID: Option<f64>,
    pub Barcode: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRTableSection {
    pub IDN: i32,
    pub TableSectionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Name: Option<String>,
    pub SyncStatus: Option<u8>,
    pub FloorColor: Option<i32>,
    pub FloorPicturePath: Option<String>,
    pub ItemOrder: Option<i16>,
    pub ButtonColor: Option<i32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRUpcharge {
    pub IDN: i32,
    pub UpchargeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub ItemIDN: Option<f64>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub Price: Option<f64>,
    pub IconName: Option<String>,
    pub ItemOrder: Option<i32>,
    pub RememberUsage: Option<bool>,
    pub SyncStatus: Option<u8>,
    pub KitchenPrinterNum: Option<u8>,
    pub NameKitchen: Option<String>,
    pub IsSameDish: Option<bool>,
    pub NameButton: Option<String>,
    pub NameInvoice: Option<String>,
    pub ButtonColor: Option<i32>,
    pub MinQty: Option<i16>,
    pub MaxQty: Option<i16>,
    pub UpchargeGroupIDN: Option<f64>,
    pub ParentUpchargeIDN: Option<f64>,
    pub IsPrintOnInvoice: Option<bool>,
    pub FreeQty: Option<i16>,
    pub IsPizzaModifier: Option<bool>,
    pub PrintStyle: Option<u8>,
    pub ShowIndividualPrice: Option<bool>,
    pub IsOpenPrice: Option<bool>,
    pub ImagePathKiosk: Option<String>,
    pub IsShowOnKiosk: Option<bool>,
    pub NameKiosk: Option<String>,
    pub LinkedItemIDN: Option<f64>,
    pub IsPrefix: Option<bool>,
    pub IsPrintOnReceipt: Option<bool>,
    pub IsShowButtonCaption: Option<bool>,
    pub OnlineModifierID: Option<i32>,
    pub KitchenPrinterIndex: Option<u8>,
    pub IsAskMemo: Option<bool>,
    pub IsTaxExempt: Option<bool>,
    pub IsOnOff: Option<bool>,
    pub IsAskQty: Option<bool>,
    pub PriceHalf: Option<f64>,
    pub PriceQuarter: Option<f64>,
    pub PriceThird: Option<f64>,
    pub PrefixPriceAdjustmentRatio: Option<i16>,
    pub IsPrintInKitchen: Option<bool>,
    pub KioskImageName: Option<String>,
    pub IsKioskImageAssigned: Option<bool>,
    pub KioskIsMultiSelect: Option<bool>,
    pub IsSubModifier: Option<bool>,
    pub IsPrintOnlyModifierName: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSDictionary {
    pub IDN: i32,
    pub DictionaryIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub ItemOrder: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub Name4: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboROffday {
    pub IDN: i32,
    pub OffdayIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub StartDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndDate: Option<DateTime<Utc>>,
    pub TypeIDC: Option<String>,
    pub SpecialPriceIDN: Option<f64>,
    pub EmployeeIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTPurchaseOrderItem {
    pub IDN: i32,
    pub PurchaseOrderItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub PurchaseOrderIDN: Option<f64>,
    pub Qty: Option<f32>,
    pub Price: Option<f64>,
    pub Subtotal: Option<f64>,
    pub ReferenceIDN: Option<f64>,
    pub FItem: Option<String>,
    pub FVendor: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSDummy {
    pub IDN: i32,
    pub DummyIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Data1: Option<String>,
    pub Data2: Option<String>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRUpchargeGroup {
    pub IDN: i32,
    pub UpchargeGroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub ButtonColor: Option<i32>,
    pub MinQty: Option<i16>,
    pub MaxQty: Option<i16>,
    pub ItemIDN: Option<f64>,
    pub ItemOrder: Option<i32>,
    pub FreeQty: Option<i16>,
    pub NameKiosk: Option<String>,
    pub IsShowOnKiosk: Option<bool>,
    pub LinkUpchargeGroupIDN: Option<f64>,
    pub IsLinked: Option<bool>,
    pub IsOptional: Option<bool>,
    pub ParentUpchargeIDN: Option<f64>,
    pub IsKioskMultiQty: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQtActiveInvoice {
    pub IDN: i32,
    pub InvoiceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    pub AppointmentIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub Tax: Option<f64>,
    pub Discount: Option<f64>,
    pub Total: Option<f64>,
    pub Payment: Option<f64>,
    pub Credit: Option<f64>,
    pub Summary: Option<String>,
    pub IsDone: Option<bool>,
    pub IsVoid: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub VoidUserIDN: Option<f64>,
    pub VoidReasonIDN: Option<f64>,
    pub BonusMileageUsed: Option<f64>,
    pub BonusMileageAdded: Option<f64>,
    pub IsHold: Option<bool>,
    pub TipAmount: Option<f64>,
    pub IsStarted: Option<bool>,
    pub CouponPrintList: Option<String>,
    pub TypeIDC: Option<String>,
    pub GuestNumber: Option<i16>,
    pub GuestName: Option<String>,
    pub IsDelivering: Option<bool>,
    pub InvoiceNumber: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub IsTaxExempt: Option<bool>,
    pub IsSplit: Option<bool>,
    pub SplitTypeIDC: Option<String>,
    pub DiscountReason: Option<String>,
    pub ParentInvoiceIDN: Option<f64>,
    pub SplitCount: Option<i16>,
    pub DeliveryCharge: Option<f64>,
    pub OrderNum: Option<i16>,
    pub EditCount: Option<i16>,
    pub ChangeGiven: Option<f64>,
    pub TableNum: Option<String>,
    pub ServerIDN: Option<f64>,
    pub VoidReason: Option<String>,
    pub DeliveryUserIDN: Option<f64>,
    pub IsAutoGratuityExempt: Option<bool>,
    pub PriceGroupIDN: Option<f64>,
    pub TableIDN: Option<f64>,
    pub Tax1: Option<f64>,
    pub Tax2: Option<f64>,
    pub Tax3: Option<f64>,
    pub IsOnlineOrder: Option<bool>,
    pub Balance: Option<f64>,
    pub Memo: Option<String>,
    pub QuickOrderTypeIDC: Option<String>,
    pub IsCanceled: Option<bool>,
    pub Collected: Option<f64>,
    pub RoomCharge: Option<f64>,
    pub IsDelivered: Option<bool>,
    pub IsExtraInfoAsked: Option<bool>,
    pub SplitIndex: Option<i16>,
    pub TicketNumber: Option<String>,
    pub TipReserved: Option<f64>,
    pub SplitAdjustment: Option<f64>,
    pub IsCheckPrinted: Option<bool>,
    pub IsContainTimedItem: Option<bool>,
    pub TipAutoGratuity: Option<f64>,
    pub SpecialPriceIDN: Option<f64>,
    pub VoidPaymentUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub VoidPaymentDate: Option<DateTime<Utc>>,
    pub TipManual: Option<f64>,
    pub TipSettleAmount: Option<f64>,
    pub PaymentType: Option<String>,
    pub PaymentUserIDN: Option<f64>,
    pub IsInventoryUpdated: Option<bool>,
    pub IsClosed: Option<bool>,
    pub ShiftIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PickupTime: Option<DateTime<Utc>>,
    pub IsChain: Option<bool>,
    pub IsAutoGratuity: Option<bool>,
    pub ServerTipRatio: Option<i16>,
    pub InternetAccessCode: Option<String>,
    pub IsKioskOrder: Option<bool>,
    pub IsLabelPrinted: Option<bool>,
    pub PagerNumber: Option<String>,
    pub TaxExemptAmount: Option<f64>,
    pub TipPercentage: Option<i16>,
    pub OnlineOrderID: Option<i32>,
    pub OnlineOrderTypeIDC: Option<String>,
    pub ServiceChargeAutoGratuity: Option<f64>,
    pub ServiceChargeManual: Option<f64>,
    pub ServiceCharge: Option<f64>,
    pub ServiceChargePercentage: Option<i16>,
    pub IsContainHoldKitchenItem: Option<bool>,
    pub Shift2IDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PaymentDate: Option<DateTime<Utc>>,
    pub IsCommissionCalculated: Option<bool>,
    pub DeliveryIDN: Option<f64>,
    pub IsReleaseTable: Option<bool>,
    pub TaxAutoGratuity: Option<f64>,
    pub TotalNonTaxable: Option<f64>,
    pub TotalTaxable: Option<f64>,
    pub BagCharge: Option<f64>,
    pub SectionGroupID: Option<u8>,
    pub CCSurcharge: Option<f64>,
    pub IsContainHoldTimeItem: Option<bool>,
    pub IsSMSSent: Option<bool>,
    pub IsKDDone: Option<bool>,
    pub IsDriveThru: Option<bool>,
    pub DeliveryCompanyIDN: Option<f64>,
    pub TotalEBT: Option<f64>,
    pub IsContainDeposit: Option<bool>,
    pub CashDiscount: Option<f64>,
    pub IsExemptCCSurcharge: Option<bool>,
    pub OrderPin: Option<i16>,
    pub TaxCCSurcharge: Option<f64>,
    pub TipItem: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSPreference {
    pub IDN: i32,
    pub PreferenceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Category: Option<String>,
    pub PrefKey: Option<String>,
    pub PrefValue: Option<String>,
    pub StationName: Option<String>,
    pub SyncStatus: Option<u8>,
    pub IsEncrypted: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSReference {
    pub IDN: i32,
    pub ReferenceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub TypeIDC: Option<String>,
    pub CategoryIDC: Option<String>,
    pub CategoryIDN: Option<f64>,
    pub ReferenceIDC: Option<String>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub Code: Option<i32>,
    pub IconName: Option<String>,
    pub ItemOrder: Option<i32>,
    pub Options: Option<String>,
    pub ShowInHQ: Option<bool>,
    pub SyncStatus: Option<u8>,
    pub IsCustom: Option<bool>,
    pub Memo: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSGeneric {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub DataLong: Option<i32>,
    pub DataCurrency: Option<f64>,
    pub DataText: Option<String>,
    pub DataCurrency2: Option<f64>,
    pub DataDecimal: Option<f32>,
    pub Percentage: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRSpecialPriceModifier {
    pub IDN: i32,
    pub SpecialPriceModifierIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub SpecialPriceIDN: Option<f64>,
    pub Price: Option<f64>,
    pub IsPriceChanged: Option<bool>,
    pub UpchargeIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQtActiveInvoice1 {
    pub IDN: i32,
    pub InvoiceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    pub AppointmentIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub Tax: Option<f64>,
    pub Discount: Option<f64>,
    pub Total: Option<f64>,
    pub Payment: Option<f64>,
    pub Credit: Option<f64>,
    pub Summary: Option<String>,
    pub IsDone: Option<bool>,
    pub IsVoid: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub VoidUserIDN: Option<f64>,
    pub VoidReasonIDN: Option<f64>,
    pub BonusMileageUsed: Option<f64>,
    pub BonusMileageAdded: Option<f64>,
    pub IsHold: Option<bool>,
    pub TipAmount: Option<f64>,
    pub IsStarted: Option<bool>,
    pub CouponPrintList: Option<String>,
    pub TypeIDC: Option<String>,
    pub GuestNumber: Option<i16>,
    pub GuestName: Option<String>,
    pub IsDelivering: Option<bool>,
    pub InvoiceNumber: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub IsTaxExempt: Option<bool>,
    pub IsSplit: Option<bool>,
    pub SplitTypeIDC: Option<String>,
    pub DiscountReason: Option<String>,
    pub ParentInvoiceIDN: Option<f64>,
    pub SplitCount: Option<i16>,
    pub DeliveryCharge: Option<f64>,
    pub OrderNum: Option<i16>,
    pub EditCount: Option<i16>,
    pub ChangeGiven: Option<f64>,
    pub TableNum: Option<String>,
    pub ServerIDN: Option<f64>,
    pub VoidReason: Option<String>,
    pub DeliveryUserIDN: Option<f64>,
    pub IsAutoGratuityExempt: Option<bool>,
    pub PriceGroupIDN: Option<f64>,
    pub TableIDN: Option<f64>,
    pub Tax1: Option<f64>,
    pub Tax2: Option<f64>,
    pub Tax3: Option<f64>,
    pub IsOnlineOrder: Option<bool>,
    pub Balance: Option<f64>,
    pub Memo: Option<String>,
    pub QuickOrderTypeIDC: Option<String>,
    pub IsCanceled: Option<bool>,
    pub Collected: Option<f64>,
    pub RoomCharge: Option<f64>,
    pub IsDelivered: Option<bool>,
    pub IsExtraInfoAsked: Option<bool>,
    pub SplitIndex: Option<i16>,
    pub TicketNumber: Option<String>,
    pub TipReserved: Option<f64>,
    pub SplitAdjustment: Option<f64>,
    pub IsCheckPrinted: Option<bool>,
    pub IsContainTimedItem: Option<bool>,
    pub TipAutoGratuity: Option<f64>,
    pub SpecialPriceIDN: Option<f64>,
    pub VoidPaymentUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub VoidPaymentDate: Option<DateTime<Utc>>,
    pub TipManual: Option<f64>,
    pub TipSettleAmount: Option<f64>,
    pub PaymentType: Option<String>,
    pub PaymentUserIDN: Option<f64>,
    pub IsInventoryUpdated: Option<bool>,
    pub IsClosed: Option<bool>,
    pub ShiftIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PickupTime: Option<DateTime<Utc>>,
    pub IsChain: Option<bool>,
    pub IsAutoGratuity: Option<bool>,
    pub ServerTipRatio: Option<i16>,
    pub InternetAccessCode: Option<String>,
    pub IsKioskOrder: Option<bool>,
    pub IsLabelPrinted: Option<bool>,
    pub PagerNumber: Option<String>,
    pub TaxExemptAmount: Option<f64>,
    pub TipPercentage: Option<i16>,
    pub OnlineOrderID: Option<i32>,
    pub OnlineOrderTypeIDC: Option<String>,
    pub ServiceChargeAutoGratuity: Option<f64>,
    pub ServiceChargeManual: Option<f64>,
    pub ServiceCharge: Option<f64>,
    pub ServiceChargePercentage: Option<i16>,
    pub IsContainHoldKitchenItem: Option<bool>,
    pub Shift2IDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PaymentDate: Option<DateTime<Utc>>,
    pub IsCommissionCalculated: Option<bool>,
    pub DeliveryIDN: Option<f64>,
    pub IsReleaseTable: Option<bool>,
    pub TaxAutoGratuity: Option<f64>,
    pub TotalNonTaxable: Option<f64>,
    pub TotalTaxable: Option<f64>,
    pub BagCharge: Option<f64>,
    pub SectionGroupID: Option<u8>,
    pub CCSurcharge: Option<f64>,
    pub IsContainHoldTimeItem: Option<bool>,
    pub IsSMSSent: Option<bool>,
    pub IsKDDone: Option<bool>,
    pub IsDriveThru: Option<bool>,
    pub DeliveryCompanyIDN: Option<f64>,
    pub TotalEBT: Option<f64>,
    pub IsContainDeposit: Option<bool>,
    pub CashDiscount: Option<f64>,
    pub IsExemptCCSurcharge: Option<bool>,
    pub OrderPin: Option<i16>,
    pub TaxCCSurcharge: Option<f64>,
    pub TipItem: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSReport {
    pub IDN: i32,
    pub ReportIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CategoryIDC: Option<String>,
    pub ReferenceIDC: Option<String>,
    pub Code: Option<String>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub Parameters: Option<String>,
    pub Options: Option<String>,
    pub ItemOrder: Option<i32>,
    pub Groups: Option<String>,
    pub Sums: Option<String>,
    pub ShowInHQ: Option<bool>,
    pub ShowGraph: Option<bool>,
    pub Graph: Option<String>,
    pub SyncStatus: Option<u8>,
    pub ShowInStore: Option<bool>,
    pub CustomFieldDef: Option<String>,
    pub CustomGroupDef: Option<String>,
    pub CustomOrderDef: Option<String>,
    pub CustomSQL: Option<String>,
    pub IsCustom: Option<bool>,
    pub ShowInMap: Option<bool>,
    pub Percentage: Option<String>,
    pub Note: Option<String>,
    pub CrossTab: Option<String>,
    pub IsAllowCrossTab: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTMemo {
    pub IDN: i32,
    pub MemoIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub ReferenceIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub Summary: Option<String>,
    pub Qty: Option<i16>,
    pub AdjustedPrice: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTRoyalty {
    pub IDN: i32,
    pub RoyaltyIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub AmountDue: Option<f64>,
    pub Balance: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub DateEnd: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub DateStart: Option<DateTime<Utc>>,
    pub DeliveryCharge: Option<f64>,
    pub DiscountCoupon: Option<f64>,
    pub DiscountItem: Option<f64>,
    pub DiscountMileage: Option<f64>,
    pub DiscountTotal: Option<f64>,
    pub GiftCardReward: Option<f64>,
    pub GiftCardSales: Option<f64>,
    pub GiftCardSettlement: Option<f64>,
    pub GrossSales: Option<f64>,
    pub InvoiceNumber: Option<i32>,
    pub ItemSales: Option<f64>,
    pub MarketingFee: Option<f64>,
    pub NetSales: Option<f64>,
    pub Payment: Option<f64>,
    pub RoyaltyAmount: Option<f64>,
    pub RoyaltyBase: Option<f64>,
    pub SalesTotal: Option<f64>,
    pub StatusIDN: Option<f64>,
    pub Tax: Option<f64>,
    pub TotalSales: Option<f64>,
    pub Tips: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRSecurityGroup {
    pub IDN: i32,
    pub SecurityGroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub RestrictedActions: Option<String>,
    pub RestrictedDiscounts: Option<String>,
    pub Name: Option<String>,
    pub ItemOrder: Option<i16>,
    pub IsSystem: Option<bool>,
    pub RestrictedReports: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRMemo {
    pub IDN: i32,
    pub MemoIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub MemoCategoryIDN: Option<f64>,
    pub Name: Option<String>,
    pub IsPreFix: Option<bool>,
    pub IsPostFix: Option<bool>,
    pub IsForceKitchenPrint: Option<bool>,
    pub ForeignName: Option<String>,
    pub IsOpenPrice: Option<bool>,
    pub Price: Option<f64>,
    pub ButtonColor: Option<i32>,
    pub ItemOrder: Option<i32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTPOInvoice {
    pub IDN: i32,
    pub POInvoiceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InvoiceNumber: Option<String>,
    pub Subtotal: Option<f64>,
    pub Shipping: Option<f64>,
    pub Credit: Option<f64>,
    pub Total: Option<f64>,
    pub BillTo: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub StartDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndDate: Option<DateTime<Utc>>,
    pub StoreIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub DueDate: Option<DateTime<Utc>>,
    pub IsSent: Option<bool>,
    pub FStatus: Option<String>,
    pub IsDone: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub DateSent: Option<DateTime<Utc>>,
    pub IsVoid: Option<bool>,
    pub InvoiceNote: Option<String>,
    pub Tax: Option<f64>,
    pub Discount: Option<f64>,
    pub Payment: Option<f64>,
    pub Balance: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PaymentDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub InvoiceDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub InvoicedPOItemIDNs: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSTempCustomerByCategoryItemSide2 {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub ItemIDN: Option<f64>,
    #[serde(rename(deserialize = "Side Name"))]
    pub Side_Name: Option<String>,
    #[serde(rename(deserialize = "Side Qty"))]
    pub Side_Qty: Option<i32>,
    #[serde(rename(deserialize = "Side Total"))]
    pub Side_Total: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSMessage {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub Message: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSDelete {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub DeletedIDN: Option<f64>,
    pub TableID: Option<i32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTBatchSettle {
    pub IDN: i32,
    pub BatchSettleIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Result: Option<String>,
    pub IsAccepted: Option<bool>,
    pub ErrorCode: Option<i32>,
    pub ErrorDesc: Option<String>,
    pub Status: Option<String>,
    pub ItemCount: Option<String>,
    pub BatchNumber: Option<String>,
    pub RespCode: Option<String>,
    pub Balance: Option<f64>,
    pub TotalCreditCard: Option<f64>,
    pub TotalDebit: Option<f64>,
    pub TotalEBT: Option<f64>,
    pub CountCreditCard: Option<i32>,
    pub CountDebit: Option<i32>,
    pub CountEBT: Option<i32>,
    pub CCSurchargeAmount: Option<f64>,
    pub EstimatedDeposit: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSTempCustomerByCategoryItemSide1 {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub Category_Name: Option<String>,
    pub Item_Name: Option<String>,
    pub Item_Qty: Option<i32>,
    pub Item_Total: Option<f64>,
    pub Side_Name: Option<String>,
    pub Side_Qty: Option<i32>,
    pub Side_Total: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSCheckConnection {
    pub IDN: i32,
    pub CheckConnectionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTMessage {
    pub IDN: i32,
    pub MessageIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Message: Option<String>,
    pub Title: Option<String>,
    pub Attach1FileName: Option<String>,
    pub Attach2FileName: Option<String>,
    pub Attach3FileName: Option<String>,
    pub TargetStoreID: Option<i32>,
    pub SourceStoreID: Option<i32>,
    pub FTargetStoreName: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub DateSent: Option<DateTime<Utc>>,
    pub AttachmentCount: Option<i16>,
    pub IsViewed: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub SentDate: Option<DateTime<Utc>>,
    pub SentToEmployeeIDNs: Option<String>,
    pub ViewedEmployeeIDNs: Option<String>,
    pub IsTextMessage: Option<bool>,
    pub FSentTo: Option<String>,
    pub IsReplied: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSOnlineOrder {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub Data: Option<String>,
    pub IsProcessed: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQvSalesByCategory {
    pub Year: Option<i32>,
    pub Month: Option<i32>,
    pub Name: Option<String>,
    pub Total: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTDrawerAmount {
    pub IDN: i32,
    pub DrawerAmountIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Start_1D: Option<i16>,
    pub Start_2D: Option<i16>,
    pub Start_5D: Option<i16>,
    pub Start_10D: Option<i16>,
    pub Start_20D: Option<i16>,
    pub Start_50D: Option<i16>,
    pub Start_100D: Option<i16>,
    pub Start_1C: Option<i16>,
    pub Start_5C: Option<i16>,
    pub Start_10C: Option<i16>,
    pub Start_25C: Option<i16>,
    pub Start_50C: Option<i16>,
    pub Start_100C: Option<i16>,
    pub End_1D: Option<i16>,
    pub End_2D: Option<i16>,
    pub End_5D: Option<i16>,
    pub End_10D: Option<i16>,
    pub End_20D: Option<i16>,
    pub End_50D: Option<i16>,
    pub End_100D: Option<i16>,
    pub End_1C: Option<i16>,
    pub End_5C: Option<i16>,
    pub End_10C: Option<i16>,
    pub End_25C: Option<i16>,
    pub End_50C: Option<i16>,
    pub End_100C: Option<i16>,
    pub AmountStart: Option<f64>,
    pub AmountEnd: Option<f64>,
    pub AmountDifference: Option<f64>,
    pub Status: Option<i16>,
    pub DrawerNum: Option<i16>,
    pub End_Roll: Option<f64>,
    pub Start_Roll: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub StartDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndDate: Option<DateTime<Utc>>,
    pub Difference: Option<f64>,
    pub CCTipAsCash: Option<f64>,
    pub StartEmployeeIDN: Option<f64>,
    pub EndEmployeeIDN: Option<f64>,
    pub DrawerInOutMethod: Option<i16>,
    pub IsAutoIn: Option<bool>,
    pub CCTipFee: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSPCChargeTrans {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub Number: Option<i32>,
    #[serde(rename(deserialize = "Invoice #"))]
    pub Invoice__: Option<String>,
    #[serde(rename(deserialize = "Trans Date"))]
    #[serde(with = "ts_seconds_option")]
    pub Trans_Date: Option<DateTime<Utc>>,
    #[serde(rename(deserialize = "CC Action"))]
    pub CC_Action: Option<String>,
    pub Amount: Option<f64>,
    pub Gratuity: Option<f64>,
    pub Total: Option<f64>,
    #[serde(rename(deserialize = "Tax Amount"))]
    pub Tax_Amount: Option<f64>,
    pub Result: Option<String>,
    pub Auth: Option<String>,
    pub Manual: Option<String>,
    pub Station: Option<String>,
    pub Processor: Option<String>,
    pub Card: Option<String>,
    pub Issuer: Option<String>,
    pub Status: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQvSalesByDay {
    pub Year: Option<i32>,
    pub Month: Option<i32>,
    pub Day: Option<i32>,
    pub Total: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRBreak {
    pub IDN: i32,
    pub BreakIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub MinimumMinutes: Option<i16>,
    #[serde(with = "ts_seconds_option")]
    pub BreakEveryHourMinute: Option<DateTime<Utc>>,
    pub PayFirstMinutes: Option<i16>,
    pub NotifyBeforeMinutes: Option<i16>,
    pub NotificationEMail: Option<String>,
    pub NotificationSecurityGroupIDN: Option<f64>,
    pub IsSendTextMessage: Option<bool>,
    pub IsSendMessage: Option<bool>,
    pub IsSendEMail: Option<bool>,
    pub IsPaidBreak: Option<bool>,
    pub IsBreakActive: Option<bool>,
    pub Message: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRKioskCategory {
    pub IDN: i32,
    pub KioskCategoryIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub ButtonColor: Option<i32>,
    pub IsIconAssigned: Option<bool>,
    pub ItemButtonBaseIndex: Option<i16>,
    pub ItemCaptionPosition: Option<String>,
    pub ItemColumnCount: Option<i16>,
    pub ItemFontName: Option<String>,
    pub ItemFontSize: Option<i16>,
    pub ItemIconMargin: Option<i16>,
    pub ItemOrder: Option<i32>,
    pub ItemPriceFontName: Option<String>,
    pub ItemPriceFontSize: Option<i16>,
    pub ItemPricePosition: Option<String>,
    pub ItemRowCount: Option<i16>,
    pub Name: Option<String>,
    pub ItemFontSizePrice: Option<i16>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTInvoiceStat {
    pub IDN: i32,
    pub InvoiceStatIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub SyncIDN: Option<f64>,
    pub CustomerIDN: Option<f64>,
    pub BonusMileageUsed: Option<f64>,
    pub BonusMileageAdded: Option<f64>,
    pub IsDone: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTInventoryReceive {
    pub IDN: i32,
    pub InventoryReceiveIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InventoryItemIDN: Option<f64>,
    pub BoxQty: Option<i32>,
    pub PackageQty: Option<i32>,
    pub Total: Option<f64>,
    pub PurchaseOrderIDN: Option<f64>,
    pub PONumber: Option<String>,
    pub Qty: Option<i32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTWeather {
    pub IDN: i32,
    pub WeatherIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub D_city: Option<String>,
    pub D_region: Option<String>,
    pub D_country: Option<String>,
    pub D_chill: Option<i16>,
    pub D_direction: Option<String>,
    pub D_speed: Option<i16>,
    pub D_humidity: Option<i16>,
    pub D_visibility: Option<i16>,
    pub D_pressure: Option<i16>,
    pub D_rising: Option<i16>,
    #[serde(with = "ts_seconds_option")]
    pub D_sunrise: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub D_sunset: Option<DateTime<Utc>>,
    pub D_text: Option<String>,
    pub D_day: Option<String>,
    pub D_low: Option<i16>,
    pub D_high: Option<i16>,
    pub D_code: Option<i16>,
    pub D_temp: Option<i16>,
    pub Zipcode: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQvSalesByMonth {
    pub Year: Option<i32>,
    pub Month: Option<i32>,
    pub Total: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboQtActiveItem {
    #[serde(with = "ts_seconds_option")]
    pub PaymentDate: Option<DateTime<Utc>>,
    pub IDN: i32,
    pub ItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub ReferenceIDN: Option<f64>,
    pub InvoiceIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub Balance: Option<f64>,
    pub Summary: Option<String>,
    pub EmployeeIDN: Option<f64>,
    pub AdjustedPrice: Option<f64>,
    pub CardIDN: Option<f64>,
    pub IsVoid: Option<bool>,
    pub PackageGroupIDN: Option<f64>,
    pub PackageIDN: Option<f64>,
    pub Memo: Option<String>,
    pub SyncStatus: Option<u8>,
    pub Qty: Option<i16>,
    pub IsPrinted: Option<bool>,
    pub SplitCount: Option<i16>,
    pub QtyAdded: Option<i16>,
    pub Discount: Option<f64>,
    pub DiscountReason: Option<String>,
    pub IsRecipeCalculated: Option<bool>,
    pub ItemDiscount: Option<f64>,
    pub SubtotalOriginal: Option<f64>,
    pub Tax1: Option<f64>,
    pub Tax2: Option<f64>,
    pub Tax3: Option<f64>,
    pub Tax: Option<f64>,
    pub IsCanceled: Option<bool>,
    pub IsDeleted: Option<bool>,
    pub QtyActual: Option<i16>,
    pub Price: Option<f64>,
    pub GiftcardID: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub AdjustedTime: Option<DateTime<Utc>>,
    pub IsSplitted: Option<bool>,
    pub TotalTaxable: Option<f64>,
    pub TotalNonTaxable: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDateInvoice: Option<DateTime<Utc>>,
    pub MemoPrefix: Option<String>,
    pub MemoPostfix: Option<String>,
    pub MemoSpecialPrice: Option<String>,
    pub Total: Option<f64>,
    pub ShiftIDN: Option<f64>,
    pub GiftcardAmount: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub GiftcardExpiration: Option<DateTime<Utc>>,
    pub TipAmount: Option<f64>,
    pub GuestIndex: Option<u8>,
    pub IsRefund: Option<bool>,
    pub IsHoldKitchen: Option<bool>,
    pub IsOnlineOrder: Option<bool>,
    pub IsItemSplitted: Option<bool>,
    pub CRV: Option<f64>,
    pub IsAddedAfterSplit: Option<bool>,
    pub IsTimerStopped: Option<bool>,
    pub IsHalf: Option<bool>,
    pub ItemOrder: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub KitchenSendTime: Option<DateTime<Utc>>,
    pub IsInventoryUpdated: Option<bool>,
    pub HoldTime: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub SendOn: Option<DateTime<Utc>>,
    pub KDStatus: Option<String>,
    pub IsKDDone: Option<bool>,
    pub HoldStationID: Option<u8>,
    pub IsTaxExempt: Option<bool>,
    pub CourseNum: Option<u8>,
    pub OpenPrice: Option<f64>,
    pub DispenseCount: Option<u8>,
    pub IsFired: Option<bool>,
    pub KDBumpStatus: Option<i16>,
    pub TipItem: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTInvoice {
    pub IDN: i32,
    pub InvoiceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    pub AppointmentIDN: Option<f64>,
    pub Subtotal: Option<f64>,
    pub Tax: Option<f64>,
    pub Discount: Option<f64>,
    pub Total: Option<f64>,
    pub Payment: Option<f64>,
    pub Credit: Option<f64>,
    pub Summary: Option<String>,
    pub IsDone: Option<bool>,
    pub IsVoid: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub VoidUserIDN: Option<f64>,
    pub VoidReasonIDN: Option<f64>,
    pub BonusMileageUsed: Option<f64>,
    pub BonusMileageAdded: Option<f64>,
    pub IsHold: Option<bool>,
    pub TipAmount: Option<f64>,
    pub IsStarted: Option<bool>,
    pub CouponPrintList: Option<String>,
    pub TypeIDC: Option<String>,
    pub GuestNumber: Option<i16>,
    pub GuestName: Option<String>,
    pub IsDelivering: Option<bool>,
    pub InvoiceNumber: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub IsTaxExempt: Option<bool>,
    pub IsSplit: Option<bool>,
    pub SplitTypeIDC: Option<String>,
    pub DiscountReason: Option<String>,
    pub ParentInvoiceIDN: Option<f64>,
    pub SplitCount: Option<i16>,
    pub DeliveryCharge: Option<f64>,
    pub OrderNum: Option<i16>,
    pub EditCount: Option<i16>,
    pub ChangeGiven: Option<f64>,
    pub TableNum: Option<String>,
    pub ServerIDN: Option<f64>,
    pub VoidReason: Option<String>,
    pub DeliveryUserIDN: Option<f64>,
    pub IsAutoGratuityExempt: Option<bool>,
    pub PriceGroupIDN: Option<f64>,
    pub TableIDN: Option<f64>,
    pub Tax1: Option<f64>,
    pub Tax2: Option<f64>,
    pub Tax3: Option<f64>,
    pub IsOnlineOrder: Option<bool>,
    pub Balance: Option<f64>,
    pub Memo: Option<String>,
    pub QuickOrderTypeIDC: Option<String>,
    pub IsCanceled: Option<bool>,
    pub Collected: Option<f64>,
    pub RoomCharge: Option<f64>,
    pub IsDelivered: Option<bool>,
    pub IsExtraInfoAsked: Option<bool>,
    pub SplitIndex: Option<i16>,
    pub TicketNumber: Option<String>,
    pub TipReserved: Option<f64>,
    pub SplitAdjustment: Option<f64>,
    pub IsCheckPrinted: Option<bool>,
    pub IsContainTimedItem: Option<bool>,
    pub TipAutoGratuity: Option<f64>,
    pub SpecialPriceIDN: Option<f64>,
    pub VoidPaymentUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub VoidPaymentDate: Option<DateTime<Utc>>,
    pub TipManual: Option<f64>,
    pub TipSettleAmount: Option<f64>,
    pub PaymentType: Option<String>,
    pub PaymentUserIDN: Option<f64>,
    pub IsInventoryUpdated: Option<bool>,
    pub IsClosed: Option<bool>,
    pub ShiftIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PickupTime: Option<DateTime<Utc>>,
    pub IsChain: Option<bool>,
    pub IsAutoGratuity: Option<bool>,
    pub ServerTipRatio: Option<i16>,
    pub InternetAccessCode: Option<String>,
    pub IsKioskOrder: Option<bool>,
    pub IsLabelPrinted: Option<bool>,
    pub PagerNumber: Option<String>,
    pub TaxExemptAmount: Option<f64>,
    pub TipPercentage: Option<i16>,
    pub OnlineOrderID: Option<i32>,
    pub OnlineOrderTypeIDC: Option<String>,
    pub ServiceChargeAutoGratuity: Option<f64>,
    pub ServiceChargeManual: Option<f64>,
    pub ServiceCharge: Option<f64>,
    pub ServiceChargePercentage: Option<i16>,
    pub IsContainHoldKitchenItem: Option<bool>,
    pub Shift2IDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub PaymentDate: Option<DateTime<Utc>>,
    pub IsCommissionCalculated: Option<bool>,
    pub DeliveryIDN: Option<f64>,
    pub IsReleaseTable: Option<bool>,
    pub TaxAutoGratuity: Option<f64>,
    pub TotalNonTaxable: Option<f64>,
    pub TotalTaxable: Option<f64>,
    pub BagCharge: Option<f64>,
    pub SectionGroupID: Option<u8>,
    pub CCSurcharge: Option<f64>,
    pub IsContainHoldTimeItem: Option<bool>,
    pub IsSMSSent: Option<bool>,
    pub IsKDDone: Option<bool>,
    pub IsDriveThru: Option<bool>,
    pub DeliveryCompanyIDN: Option<f64>,
    pub TotalEBT: Option<f64>,
    pub IsContainDeposit: Option<bool>,
    pub CashDiscount: Option<f64>,
    pub IsExemptCCSurcharge: Option<bool>,
    pub OrderPin: Option<i16>,
    pub TaxCCSurcharge: Option<f64>,
    pub TipItem: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRItem {
    pub IDN: i32,
    pub ItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CategoryIDN: Option<f64>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub TaxRate: Option<f32>,
    pub Price: Option<f64>,
    pub IconName: Option<String>,
    pub ItemOrder: Option<i32>,
    pub IsPackage: Option<bool>,
    pub PackageCount: Option<i32>,
    pub RememberUsage: Option<bool>,
    pub Length: Option<i32>,
    pub UPC: Option<String>,
    pub SyncStatus: Option<u8>,
    pub Qty: Option<i16>,
    pub UpchargeRequiredCount: Option<i16>,
    pub IsGroupItems: Option<bool>,
    pub GroupIDN: Option<f64>,
    pub MinUpchargeQty: Option<i16>,
    pub PriceLunch: Option<f64>,
    pub NameKitchen: Option<String>,
    pub ButtonColor: Option<i32>,
    pub NameButton: Option<String>,
    pub NameInvoice: Option<String>,
    pub IsWeightedItem: Option<bool>,
    pub IsEnabled: Option<bool>,
    pub IsOpenPrice: Option<bool>,
    pub IsPrintOnInvoice: Option<bool>,
    pub IsTaxExempt: Option<bool>,
    pub TaxRate2: Option<f32>,
    pub TaxRate3: Option<f32>,
    pub Barcode: Option<String>,
    pub KitchenPrinterAssigned: Option<String>,
    pub KitchenPrinterNum: Option<u8>,
    pub KitchenMemo: Option<String>,
    pub IsPizza: Option<bool>,
    pub AppliedOrderType: Option<String>,
    pub IsSystem: Option<bool>,
    pub IsBonusMileageEligible: Option<bool>,
    pub IsSideDishOptional: Option<bool>,
    pub TimedInterval: Option<String>,
    pub TimedRoundOff: Option<i16>,
    pub TimedGracePeriod: Option<i16>,
    pub TimedPricePerInterval: Option<f64>,
    pub IsInventory: Option<bool>,
    pub IsGiftcard: Option<bool>,
    pub IsKaraoke: Option<bool>,
    pub ParentItemIDN: Option<f64>,
    pub IsTaxIncluded: Option<bool>,
    pub TareWeight: Option<f32>,
    pub ImagePathKiosk: Option<String>,
    pub IsShowOnKiosk: Option<bool>,
    pub Recipe: Option<String>,
    pub NameKiosk: Option<String>,
    pub IsInActive: Option<bool>,
    pub IsCombineSides: Option<bool>,
    pub DepartmentIDN: Option<f64>,
    pub InvoiceMemo: Option<String>,
    pub DiscountPoints: Option<i32>,
    pub IsGiftCertificate: Option<bool>,
    pub Ingredients: Option<String>,
    pub IsAskMemo: Option<bool>,
    pub IsIconAssigned: Option<bool>,
    pub IsPrintOnKitchen: Option<bool>,
    pub IsPrintOnOrderSheet: Option<bool>,
    pub IsPrintOnReceipt: Option<bool>,
    pub IsShowButtonCaption: Option<bool>,
    pub Label1IDN: Option<f64>,
    pub UpchargeLinkItemIDN: Option<f64>,
    pub OnlineItemID: Option<i32>,
    pub QtyMinimum: Option<f64>,
    pub QtyLimited: Option<f64>,
    pub IsLimitedQty: Option<bool>,
    pub Priority: Option<i16>,
    pub IsAskServer: Option<bool>,
    pub IsHoldWhenAdded: Option<bool>,
    pub AlwaysCollectTax: Option<bool>,
    pub CRV: Option<f64>,
    pub IsCRV: Option<bool>,
    pub IsExcludeFromDiscount: Option<bool>,
    pub TipSharingRatio: Option<f64>,
    pub IsPrintSeparatelyInKitchen: Option<bool>,
    pub IsPrintAllModifiersInKitchen: Option<bool>,
    pub IsKaraokeIntervalRoundUp: Option<bool>,
    pub IsPrintBarcode: Option<bool>,
    pub IsSyncJKRetail: Option<bool>,
    pub SubDepartmentIDN: Option<f64>,
    pub Size: Option<String>,
    pub IsOpenWeight: Option<bool>,
    pub IsHide: Option<bool>,
    pub KioskImageName: Option<String>,
    pub PricePromotion: Option<f64>,
    pub IsShowInKitchenDisplay: Option<bool>,
    pub IsKioskImageAssigned: Option<bool>,
    pub Description: Option<String>,
    pub Description1: Option<String>,
    pub IsEBT: Option<bool>,
    pub IsTaxedByOrderType: Option<String>,
    pub IsDeposit: Option<bool>,
    pub IsLiquorControlled: Option<bool>,
    pub VoucherPrice: Option<f64>,
    pub KDSColor: Option<i32>,
    pub ExtraInfoIDC: Option<String>,
    pub Description2: Option<String>,
    pub ItemTagIDN: Option<f64>,
    pub TipRate: Option<f64>,
    pub TipTypeIDC: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTTipSharing {
    pub IDN: i32,
    pub TipSharingIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub PaymentDate: Option<DateTime<Utc>>,
    pub FromEmployeeIDN: Option<f64>,
    pub ToEmployeeIDN: Option<f64>,
    pub Amount: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRKioskItem {
    pub IDN: i32,
    pub KioskItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub ButtonColor: Option<i32>,
    pub IsIconAssigned: Option<bool>,
    pub IsShowName: Option<bool>,
    pub IsShowPrice: Option<bool>,
    pub ItemOrder: Option<i32>,
    pub KioskCategoryIDN: Option<f64>,
    pub LinkedItemIDN: Option<f64>,
    pub Name: Option<String>,
    pub Message: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRDiscountGroup {
    pub IDN: i32,
    pub DiscountGroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub ItemOrder: Option<i16>,
    pub Name: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboEInvoice {
    pub IDN: i32,
    pub InvoiceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Count: Option<i32>,
    pub Subtotal: Option<f64>,
    pub Discount: Option<f64>,
    pub Tax: Option<f64>,
    pub TipAmount: Option<f64>,
    pub Total: Option<f64>,
    pub OrderType: Option<String>,
    pub GuestNumber: Option<i32>,
    pub Average: Option<f64>,
    pub Max: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTInventoryChange {
    pub IDN: i32,
    pub InventoryChangeIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub InventoryItemIDN: Option<f64>,
    pub InvoiceNumber: Option<i32>,
    pub InventoryChangeTypeIDN: Option<f64>,
    pub QtyBefore: Option<f32>,
    pub QtyAfter: Option<f32>,
    pub QtyChange: Option<f32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRGroup {
    pub IDN: i32,
    pub GroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub CategoryIDN: Option<f64>,
    pub ItemOrder: Option<i32>,
    pub Name: Option<String>,
    pub Color: Option<i32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTWaiver {
    pub IDN: i32,
    pub WaiverIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub IDTypeIDN: Option<f64>,
    pub IDNumber: Option<String>,
    pub FirstName: Option<String>,
    pub LastName: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub BirthDate: Option<DateTime<Utc>>,
    pub Phone: Option<String>,
    pub Address: Option<String>,
    pub City: Option<String>,
    pub State: Option<String>,
    pub Zipcode: Option<String>,
    pub Country: Option<String>,
    pub LinkedTableIDN: Option<f64>,
    pub LinkedInvoiceIDN: Option<f64>,
    pub LinkedMergedInvoiceIDN: Option<f64>,
    pub InvoiceNumber: Option<i32>,
    pub TableNumber: Option<String>,
    pub CustomerIDN: Option<f64>,
    pub Memo: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSSync {
    pub IDN: i32,
    pub SyncIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Command: Option<String>,
    pub CSyncNow: Option<bool>,
    pub CSyncMenu: Option<bool>,
    pub CSyncDiscount: Option<bool>,
    pub CSyncInventoryItem: Option<bool>,
    #[serde(with = "ts_seconds_option")]
    pub LastSyncDate: Option<DateTime<Utc>>,
    pub City: Option<String>,
    pub State: Option<String>,
    pub InvoiceCount: Option<i32>,
    pub StoreName: Option<String>,
    pub Version: Option<String>,
    pub TimeZone: Option<i16>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSLogOnlineOrder {
    pub IDN: i32,
    pub LogOnlineOrderIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Log: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRKioskModifier {
    pub IDN: i32,
    pub KioskModifierIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub ButtonColor: Option<i32>,
    pub IsIconAssigned: Option<bool>,
    pub IsShowName: Option<bool>,
    pub IsShowPrice: Option<bool>,
    pub ItemOrder: Option<i32>,
    pub KioskItemIDN: Option<f64>,
    pub KioskModifierGroupIDN: Option<f64>,
    pub LinkedModifierIDN: Option<f64>,
    pub Name: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRInventoryGroup {
    pub IDN: i32,
    pub InventoryGroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub IsSystem: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTAlert {
    pub IDN: i32,
    pub AlertIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub EmployeeIDN: Option<f64>,
    pub Description: Option<String>,
    pub TableNum: Option<String>,
    pub InvoiceNum: Option<i32>,
    pub OrderNum: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub InvoiceDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub Date2: Option<DateTime<Utc>>,
    pub AmountOriginal: Option<f64>,
    pub Amount2: Option<f64>,
    pub Reason: Option<String>,
    pub Percentage: Option<f32>,
    pub ReferenceIDN: Option<f64>,
    pub InvoiceIDN: Option<f64>,
    pub Total: Option<f64>,
    pub Subtotal: Option<f64>,
    pub QtyOriginal: Option<i16>,
    pub Qty: Option<i16>,
    pub InvoiceIDN2: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub VoidDate: Option<DateTime<Utc>>,
    pub OrderType: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboEItem {
    pub IDN: i32,
    pub ItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub ReferenceIDN: Option<f64>,
    pub QtyActual: Option<i32>,
    pub Subtotal: Option<f64>,
    pub Discount: Option<f64>,
    pub Tax: Option<f64>,
    pub Total: Option<f64>,
    pub TotalTaxable: Option<f64>,
    pub TotalNonTaxable: Option<f64>,
    pub Average: Option<f64>,
    pub Max: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSCCTransLog {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub StationID: Option<u8>,
    pub IsSuccess: Option<bool>,
    pub InvoiceNumber: Option<i32>,
    pub EmployeeIDN: Option<f64>,
    pub PaymentType: Option<String>,
    pub TransType: Option<String>,
    pub CCAuth: Option<String>,
    pub CCResult: Option<String>,
    pub Amount: Option<f64>,
    pub Duration: Option<i32>,
    pub Log: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTAccountBilling {
    pub IDN: i32,
    pub AccountBillingIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    #[serde(with = "ts_seconds_option")]
    pub StartDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndDate: Option<DateTime<Utc>>,
    pub CustomerIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSKitchenDisplayItem {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    #[serde(rename(deserialize = "1"))]
    pub One: Option<bool>,
    #[serde(rename(deserialize = "2"))]
    pub Two: Option<bool>,
    #[serde(rename(deserialize = "3"))]
    pub Three: Option<bool>,
    #[serde(rename(deserialize = "4"))]
    pub Four: Option<bool>,
    #[serde(rename(deserialize = "5"))]
    pub Five: Option<bool>,
    #[serde(rename(deserialize = "6"))]
    pub Six: Option<bool>,
    #[serde(rename(deserialize = "7"))]
    pub Seven: Option<bool>,
    #[serde(rename(deserialize = "8"))]
    pub Eight: Option<bool>,
    #[serde(rename(deserialize = "9"))]
    pub Nine: Option<bool>,
    #[serde(rename(deserialize = "10"))]
    pub One0: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRKioskModifierGroup {
    pub IDN: i32,
    pub KioskModifierGroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Instruction: Option<String>,
    pub ItemOrder: Option<i32>,
    pub KioskItemIDN: Option<f64>,
    pub ModifierButtonBaseIndex: Option<i16>,
    pub ModifierCaptionPosition: Option<String>,
    pub ModifierColumnCount: Option<i16>,
    pub ModifierFontName: Option<String>,
    pub ModifierFontSize: Option<i16>,
    pub ModifierIconMargin: Option<i16>,
    pub ModifierPriceFontName: Option<String>,
    pub ModifierPriceFontSize: Option<i16>,
    pub ModifierPricePosition: Option<String>,
    pub ModifierRowCount: Option<i16>,
    pub Name: Option<String>,
    pub MaxItem: Option<i16>,
    pub Message: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRInventoryReceive {
    pub IDN: i32,
    pub InventoryReceiveIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub BoxQty: Option<i16>,
    pub InventoryItemIDN: Option<f64>,
    pub PackageQty: Option<i16>,
    pub Total: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboEPayment {
    pub IDN: i32,
    pub PaymentIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub TypeIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub Count: Option<i32>,
    pub TipAmount: Option<f64>,
    pub Average: Option<f64>,
    pub Max: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSTable {
    pub IDN: i32,
    pub TableIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub ItemOrder: Option<i16>,
    pub Options: Option<String>,
    pub C2S: Option<bool>,
    pub IsSyncAll: Option<bool>,
    pub IsSyncHQ2Store: Option<bool>,
    pub IsSyncStore2HQ: Option<bool>,
    pub ParentTable: Option<String>,
    pub PrimaryKey: Option<String>,
    pub S2C: Option<bool>,
    pub TableID: Option<i32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSGuestInternetCode {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub Code: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRMenuGroup {
    pub IDN: i32,
    pub MenuGroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub ItemOrder: Option<i16>,
    pub Name: Option<String>,
    pub ActiveCategories: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub StartTime: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndTime: Option<DateTime<Utc>>,
    pub ActiveStations: Option<String>,
    pub IsOn: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTPayroll {
    pub IDN: i32,
    pub PayrollIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub PayTypeIDC: Option<String>,
    pub PayFreqIDC: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub DateStart: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub DateEnd: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub PayDate: Option<DateTime<Utc>>,
    pub Amount: Option<f64>,
    pub EmployeeIDN: Option<f64>,
    pub IsPaid: Option<bool>,
    pub SalaryAmount: Option<f64>,
    pub HourlyAmount: Option<f64>,
    pub Memo: Option<String>,
    pub TotalSeconds: Option<i32>,
    pub FSummary: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSStation {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub IPAddress: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub LastActiveDate: Option<DateTime<Utc>>,
    pub StationName: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSAction {
    pub IDN: i32,
    pub ActionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub InvoiceNumber: Option<i32>,
    pub Memo: Option<String>,
    pub Subtotal: Option<f64>,
    pub Discount: Option<f64>,
    pub Tax: Option<f64>,
    pub Total: Option<f64>,
    pub ComputerName: Option<String>,
    pub MemoInternal: Option<String>,
    pub TableNum: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRDepartment {
    pub IDN: i32,
    pub DepartmentIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub MaxQtyPerOrder: Option<i16>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTGiftCardTrans {
    pub IDN: i32,
    pub GiftCardTransIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub GiftcardIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub Balance: Option<f64>,
    pub Description: Option<String>,
    pub InvoiceIDN: Option<f64>,
    pub Used: Option<f64>,
    pub TypeIDC: Option<String>,
    pub InvoiceNum: Option<i32>,
    pub Description1: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRPriceGroup {
    pub IDN: i32,
    pub PriceGroupIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub AppliedDays: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub DateEnd: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub DateStart: Option<DateTime<Utc>>,
    pub IsDefault: Option<bool>,
    pub ItemOrder: Option<i32>,
    pub MenuGroupIDN: Option<f64>,
    pub Name: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSEditingInvoice {
    pub IDN: i32,
    pub EditingInvoiceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub StationName: Option<String>,
    pub TableIDN: Option<f64>,
    pub EmployeeIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRPOItem {
    pub IDN: i32,
    pub POItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    pub Description: Option<String>,
    pub ProductNumber: Option<String>,
    pub UPC: Option<String>,
    pub Price: Option<f64>,
    pub OnHand: Option<f32>,
    pub MinOrderQty: Option<f32>,
    pub Size: Option<f32>,
    pub SizeUnitIDN: Option<f64>,
    pub FSize: Option<String>,
    pub PackageSize: Option<f32>,
    pub PackageSizeUnitIDN: Option<f64>,
    pub FPackageSize: Option<String>,
    pub Weight: Option<f32>,
    pub WeightUnitIDN: Option<f64>,
    pub FWeight: Option<String>,
    pub CategoryIDN: Option<f64>,
    pub Category2IDN: Option<f64>,
    pub Category3IDN: Option<f64>,
    pub OriginIDN: Option<f64>,
    pub VendorIDN: Option<f64>,
    pub BrandIDN: Option<f64>,
    pub Margin: Option<f32>,
    pub Cost: Option<f64>,
    pub CasePrice: Option<f64>,
    pub IsDiscontinued: Option<bool>,
    pub FCategory: Option<String>,
    pub FCategory2: Option<String>,
    pub FCategory3: Option<String>,
    pub FOrigin: Option<String>,
    pub FVendor: Option<String>,
    pub FBrand: Option<String>,
    pub VendorItemNumer: Option<String>,
    #[serde(rename(deserialize = "FS'ubDepartment"))]
    pub FS_ubDepartment: Option<String>,
    pub SubDepartmentIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTShift {
    pub IDN: i32,
    pub ShiftIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub StartDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndDate: Option<DateTime<Utc>>,
    pub Status: Option<u8>,
    pub ShiftID: Option<i32>,
    pub StartUserIDN: Option<f64>,
    pub EndUserIDN: Option<f64>,
    pub FDuration: Option<String>,
    pub GroupID: Option<i16>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRRecipeItem {
    pub IDN: i32,
    pub RecipeItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InventoryItemIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub ItemOrder: Option<i32>,
    pub Qty: Option<f32>,
    pub Unit: Option<String>,
    pub UpchargeIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRInventoryItem {
    pub IDN: i32,
    pub InventoryItemIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CategoryIDN: Option<f64>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub TaxRate: Option<f32>,
    pub Price: Option<f64>,
    pub IconName: Option<String>,
    pub ItemOrder: Option<i32>,
    pub Length: Option<i32>,
    pub UPC: Option<String>,
    pub Qty: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub TypeIDC: Option<String>,
    pub ItemNumber: Option<String>,
    pub Size: Option<String>,
    pub Unit: Option<String>,
    pub BarcodeBox: Option<String>,
    pub BarcodeItem: Option<String>,
    pub InventoryGroupIDN: Option<f64>,
    pub IsRecipeItem: Option<bool>,
    pub MinQtyBeforeReorder: Option<i16>,
    pub QtyNow: Option<f32>,
    pub QtyPerBox: Option<f32>,
    pub QtyPerPackage: Option<f32>,
    pub QtyUsed: Option<f32>,
    pub TargetQtyToReorder: Option<i16>,
    pub ItemIDN: Option<f64>,
    pub Ingredient: Option<String>,
    pub Memo: Option<String>,
    pub Weight: Option<f32>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRCategory {
    pub IDN: i32,
    pub CategoryIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Name: Option<String>,
    pub Name1: Option<String>,
    pub Name2: Option<String>,
    pub Name3: Option<String>,
    pub Code: Option<String>,
    pub TaxRate: Option<f32>,
    pub IconName: Option<String>,
    pub ItemOrder: Option<i32>,
    pub SyncStatus: Option<u8>,
    pub NameButton: Option<String>,
    pub ButtonColor: Option<i32>,
    pub PriceGroupIDN: Option<f64>,
    pub TaxRate2: Option<f32>,
    pub TaxRate3: Option<f32>,
    pub IsSystem: Option<bool>,
    pub ImagePathKiosk: Option<String>,
    pub IsShowOnKiosk: Option<bool>,
    pub NameKiosk: Option<String>,
    pub AvailableSpecialPrice: Option<String>,
    pub TipRate: Option<f32>,
    pub IsHide: Option<bool>,
    pub KioskImageName: Option<String>,
    pub UseBarTabFoodTax: Option<bool>,
    pub IsKioskImageAssigned: Option<bool>,
    pub AvailableSpecialPriceIDN: Option<f64>,
    pub IsOnline: Option<bool>,
    pub IsTableOrder: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSField {
    pub IDN: i32,
    pub FieldIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub CategoryReferenceIDN: Option<f64>,
    pub CategoryName: Option<String>,
    pub DataType: Option<String>,
    pub FieldName: Option<String>,
    pub ForeignFieldName: Option<String>,
    pub IsAllowCount: Option<bool>,
    pub IsAllowSum: Option<bool>,
    pub ItemOrder: Option<i16>,
    pub Name: Option<String>,
    pub TableIDN: Option<f64>,
    pub TableName: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboSTempCustomerByCategoryItemSide {
    pub IDN: i32,
    pub StoreID: Option<i32>,
    pub SyncStatus: Option<u8>,
    #[serde(rename(deserialize = "Category Name"))]
    pub Category_Name: Option<String>,
    #[serde(rename(deserialize = "Item Name"))]
    pub Item_Name: Option<String>,
    #[serde(rename(deserialize = "Item Qty"))]
    pub Item_Qty: Option<i32>,
    #[serde(rename(deserialize = "Item Total"))]
    pub Item_Total: Option<f64>,
    #[serde(rename(deserialize = "Side Name"))]
    pub Side_Name: Option<String>,
    #[serde(rename(deserialize = "Side Qty"))]
    pub Side_Qty: Option<i32>,
    #[serde(rename(deserialize = "Side Total"))]
    pub Side_Total: Option<f64>,
    pub ReferenceIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTAction {
    pub IDN: i32,
    pub ActionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub ActionIDC: Option<String>,
    pub EmployeeIDN: Option<f64>,
    pub CustomerIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub Memo: Option<String>,
    pub IsDebug: Option<bool>,
    pub ReferenceIDN: Option<f64>,
    pub ComputerName: Option<String>,
    pub ShiftIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTAppointment {
    pub IDN: i32,
    pub AppointmentIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ApptDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub Duration: Option<DateTime<Utc>>,
    pub IsDone: Option<bool>,
    pub Status: Option<i16>,
    pub EmployeeIDN: Option<f64>,
    pub Description: Option<String>,
    pub InvoiceIDN: Option<f64>,
    pub Memo: Option<String>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboRSpecialPrice {
    pub IDN: i32,
    pub SpecialPriceIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub Name: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub StartDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndDate: Option<DateTime<Utc>>,
    pub AppliedDay: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub StartTime: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub EndTime: Option<DateTime<Utc>>,
    pub IsRetainPrice: Option<bool>,
    pub RestrictedStationList: Option<String>,
    pub AppliedOrderType: Option<String>,
    pub IsDeliveryAppOnly: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTUser {
    pub IDN: i32,
    pub UserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub UserName: Option<String>,
    pub Password: Option<String>,
    pub SecurityGroupIDN: Option<f64>,
    pub MSR: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTCallerID {
    pub IDN: i32,
    pub CallerIDIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub Name: Option<String>,
    pub Phone: Option<String>,
    pub LineNum: Option<i16>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTCommission {
    pub IDN: i32,
    pub CommissionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub EmployeeIDN: Option<f64>,
    pub ItemIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub Rate: Option<f32>,
    pub Unit: Option<String>,
    pub SyncStatus: Option<u8>,
    pub IsAfterDiscount: Option<bool>,
    pub InvoiceIDN: Option<f64>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTCredit {
    pub IDN: i32,
    pub CreditIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub CustomerIDN: Option<f64>,
    pub EmployeeIDN: Option<f64>,
    pub Amount: Option<f64>,
    pub Reason: Option<String>,
    pub SyncStatus: Option<u8>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRTDBDboTCustomer {
    pub IDN: i32,
    pub CustomerIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub LastName: Option<String>,
    pub FirstName: Option<String>,
    pub Address: Option<String>,
    pub City: Option<String>,
    pub State: Option<String>,
    pub Zipcode: Option<String>,
    pub Phone: Option<String>,
    pub EMail: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub BirthDate: Option<DateTime<Utc>>,
    pub MemberID: Option<String>,
    pub BonusAmount: Option<f64>,
    pub CreditAmount: Option<f64>,
    pub Memo: Option<String>,
    pub InvoiceMemo: Option<String>,
    pub FName: Option<String>,
    pub FPhone: Option<String>,
    pub FAddress: Option<String>,
    pub Options: Option<String>,
    pub FBirthday: Option<String>,
    pub BonusAdjustment: Option<f64>,
    pub Phone2: Option<String>,
    pub Phone3: Option<String>,
    pub SendApptReminderEmail: Option<bool>,
    pub SyncStatus: Option<u8>,
    pub APT: Option<String>,
    pub CompanyName: Option<String>,
    pub PhoneExt: Option<String>,
    pub DeliveryCharge: Option<f64>,
    pub IsAccount: Option<bool>,
    pub AccountBalance: Option<f64>,
    pub DiscountPoints: Option<i32>,
    #[serde(with = "ts_seconds_option")]
    pub LastDateDiscountPointAdded: Option<DateTime<Utc>>,
    pub DeliveryInstruction: Option<String>,
    #[serde(with = "ts_seconds_option")]
    pub MembershipBeginDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub MembershipEndDate: Option<DateTime<Utc>>,
    pub DiscountIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub DiscountBeginDate: Option<DateTime<Utc>>,
    #[serde(with = "ts_seconds_option")]
    pub DiscountEndDate: Option<DateTime<Utc>>,
    pub IsBillToAccount: Option<bool>,
    pub BillToCustomerIDN: Option<f64>,
    pub IsConsented: Option<bool>,
    pub BonusPrinted: Option<f64>,
    pub OnlineCustomerID: Option<i32>,
    pub IsRestricted: Option<bool>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRMDBDboSZipcode {
    pub AreaCode: Option<String>,
    pub State: Option<String>,
    pub City: Option<String>,
    pub Zipcode: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRMDBDboSAction {
    pub IDN: i32,
    pub ActionIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub CreateDate: Option<DateTime<Utc>>,
    pub CreateUserIDN: Option<f64>,
    #[serde(with = "ts_seconds_option")]
    pub ModifyDate: Option<DateTime<Utc>>,
    pub ModifyUserIDN: Option<f64>,
    pub IsActive: Option<bool>,
    pub StoreID: Option<i32>,
    pub StationID: Option<i16>,
    pub SyncStatus: Option<u8>,
    pub InvoiceIDN: Option<f64>,
    pub InvoiceNumber: Option<i32>,
    pub Memo: Option<String>,
    pub Subtotal: Option<f64>,
    pub Discount: Option<f64>,
    pub Tax: Option<f64>,
    pub Total: Option<f64>,
    pub ComputerName: Option<String>,
    pub MemoInternal: Option<String>,
    pub TableNum: Option<String>,
}

#[allow(non_snake_case, non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug)]
struct JKRMDBDboDtproperties {
    pub Id: i32,
    pub Objectid: Option<i32>,
    pub Property: String,
    pub Value: Option<String>,
    pub Uvalue: Option<String>,
    pub Lvalue: Option<Vec<u8>>,
    pub Version: i32,
}
